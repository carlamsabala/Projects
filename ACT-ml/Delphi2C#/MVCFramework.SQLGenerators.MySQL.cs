using System;
using System.Collections.Generic;
using System.Text;
using MVCFramework.RQL.Parser;       
using MVCFramework.ActiveRecord;    
using MVCFramework.Commons;          

namespace MVCFramework.SQLGenerators.MySQL
{
    
    public class MVCSQLGeneratorMySQL : MVCSQLGenerator
    {
        
        private const string OBJECT_VERSION_STARTING_VALUE = "1";

        
        protected override TRQLCompiler GetCompilerClass()
        {
           
            return new TRQLMySQLCompiler();
        }

        
        public override string CreateInsertSQL(MVCTableMap tableMap, MVCActiveRecord arInstance)
        {
            
            bool pkInInsert = !string.IsNullOrEmpty(tableMap.PrimaryKeyFieldName) &&
                              !tableMap.PrimaryKeyOptions.Contains(MVCActiveRecordFieldOption.AutoGenerated);
            pkInInsert = pkInInsert && !tableMap.PrimaryKeyOptions.Contains(MVCActiveRecordFieldOption.ReadOnly);

            StringBuilder sb = new StringBuilder();
            try
            {
                sb.Append("INSERT INTO " + GetTableNameForSQL(tableMap.TableName) + "(");
                if (pkInInsert)
                {
                    sb.Append(GetFieldNameForSQL(tableMap.PrimaryKeyFieldName) + ",");
                }

                foreach (string fieldName in this.PartitionInfo.FieldNames)
                {
                    sb.Append(GetFieldNameForSQL(fieldName) + ",");
                }

                foreach (var keyValue in tableMap.Map)
                {
                    if (keyValue.Value.Insertable)
                    {
                        sb.Append(GetFieldNameForSQL(keyValue.Value.FieldName) + ",");
                    }
                }

                if (sb[sb.Length - 1] == ',')
                    sb.Remove(sb.Length - 1, 1);

                sb.Append(") values (");

                if (pkInInsert)
                {
                    sb.Append(":" + GetParamNameForSQL(tableMap.PrimaryKeyFieldName) + ",");
                }

                foreach (string fieldName in this.PartitionInfo.FieldNames)
                {
                    sb.Append(":" + GetParamNameForSQL(fieldName) + ",");
                }

                foreach (var keyValue in tableMap.Map)
                {
                    if (keyValue.Value.IsVersion)
                    {
                        sb.Append(OBJECT_VERSION_STARTING_VALUE + ",");
                    }
                    else if (keyValue.Value.Insertable)
                    {
                        sb.Append(":" + GetParamNameForSQL(keyValue.Value.FieldName) + ",");
                    }
                }

                if (sb[sb.Length - 1] == ',')
                    sb.Remove(sb.Length - 1, 1);

                sb.Append(")");

                if (tableMap.PrimaryKeyOptions.Contains(MVCActiveRecordFieldOption.AutoGenerated))
                {
                    sb.Append(";SELECT LAST_INSERT_ID() as " + tableMap.PrimaryKeyFieldName);
                }

                return sb.ToString();
            }
            finally
            {
                // Dispose StringBuilder if needed.
            }
        }
    }

    
    public static class MVCSQLGeneratorMySQLRegistration
    {
        static MVCSQLGeneratorMySQLRegistration()
        {
            MVCSQLGeneratorRegistry.Instance.RegisterSQLGenerator("mysql", typeof(MVCSQLGeneratorMySQL));
        }

    }
}
