---

services:
  act-app:
    container_name: act-app
    build:
      context: ../
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../:/usr/src/app
      - /usr/src/app/node_modules  
    working_dir: /usr/src/app
    environment:
      - OIDC_ISSUER=${OIDC_ISSUER}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - OIDC_REDIRECT_URI=${OIDC_REDIRECT_URI}
      - OIDC_AUTHORIZATION_ENDPOINT=${OIDC_AUTHORIZATION_ENDPOINT}
      - OIDC_TOKEN_ENDPOINT=${OIDC_TOKEN_ENDPOINT}
      - OIDC_USERINFO_ENDPOINT=${OIDC_USERINFO_ENDPOINT}
      - OIDC_SCOPES=${OIDC_SCOPES}
      - OIDC_COOKIE_SECRET=${OIDC_COOKIE_SECRET}
      - COUCHDB_URL=${COUCHDB_URL}
    command: npm start
    env_file:
      - .env
    networks:
      - docker_default
    depends_on:
      server:
        condition: service_healthy


  couchdb:
    image: couchdb:latest
    container_name: couchdb
    restart: always
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    ports:
      - "5984:5984"
    env_file:
      - .env
    networks:
      - docker_default
    volumes:
      - couchdb_data:/opt/couchdb/data


  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - docker_default
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - docker_default
  server:
    build:
      context: ../
      dockerfile: Dockerfile.authentik
    container_name: authentik
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates    
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - docker_default

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.0}
    restart: unless-stopped
    container_name: authentik-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    networks:
      - docker_default
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy


  translator:
    container_name: translator
    build: 
      context: ../../
      dockerfile: ACT-ml/translator/Dockerfile.translator
    ports:
      - "5001:5000"
    env_file:
      - .env
    networks:
      - docker_default

volumes:
  database:
    driver: local
  redis:
    driver: local
  couchdb_data:

networks:
  docker_default:
    driver: bridge